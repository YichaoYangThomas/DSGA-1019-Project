import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import f1_score, precision_score, recall_score, accuracy_score, roc_auc_score
from sklearn.preprocessing import LabelEncoder, label_binarize
import xgboost as xgb

df_train = pd.read_csv('train.csv')
df_test = pd.read_csv('test.csv')

binary_features = ['family_history_with_overweight', 'FAVC', 'SMOKE', 'SCC']
categorical_features = ['Gender', 'CAEC', 'CALC', 'MTRANS']

for feature in binary_features:
    le = LabelEncoder()
    df_train[feature] = le.fit_transform(df_train[feature])
    df_test[feature] = le.transform(df_test[feature])  # Apply same transformation to test data

# One-hot encoding categorical features
df_train = pd.get_dummies(df_train, columns=categorical_features)
df_test = pd.get_dummies(df_test, columns=categorical_features)

df_test = df_test.reindex(columns=df_train.columns, fill_value=0)
df_test = df_test.drop(columns=['NObeyesdad'])

X_train = df_train.drop(columns=['NObeyesdad'])
y_train = df_train['NObeyesdad']

# Encode labels
label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y_train)
classes = np.unique(y_encoded)

X_train, X_val, y_train, y_val = train_test_split(X_train, y_encoded, test_size=0.2, stratify=y_encoded, random_state=42)

# Set up XGBoost parameters for grid search
param_grid = {
    'learning_rate': [0.01, 0.05],
    'n_estimators': [100, 200],
    'max_depth': [4, 6]
}

model = xgb.XGBClassifier(objective='multi:softprob', num_class=len(classes), use_label_encoder=False)

grid_search = GridSearchCV(estimator=model, param_grid=param_grid, scoring='accuracy', n_jobs=-1, cv=3, verbose=3)
grid_search.fit(X_train, y_train)

best_model = grid_search.best_estimator_

y_pred_val = best_model.predict(X_val)
y_pred_proba_val = best_model.predict_proba(X_val)

precision = precision_score(y_val, y_pred_val, average='macro')
recall = recall_score(y_val, y_pred_val, average='macro')
accuracy = accuracy_score(y_val, y_pred_val)
y_val_binarized = label_binarize(y_val, classes=classes)
roc_auc = roc_auc_score(y_val_binarized, y_pred_proba_val, multi_class='ovr', average='macro')

print(f"Best Parameters: {grid_search.best_params_}")
print(f"Precision: {precision}")
print(f"Recall: {recall}")
print(f"Accuracy: {accuracy}")
print(f"ROC AUC: {roc_auc}")
